var tipuesearch = {"pages": [{'title': 'Final Report', 'text': '期末口頭與書面專題報告 (30%) \n 期末口頭專題報告影片: \n https://youtu.be/Od5AXnxmbrE \xa0自己倉儲進度報告 \n https://youtu.be/or3bs2a3NKY \xa0 專題進度報告 \n 期末書面專題報告檔案 (pdf): \n 報告檔案 \n 電腦輔助設計與實習課程總結心得: \n 在這堂課學到很多程式應用 nx sovlespace coppliasim 其中nx和sovlespace在我修完這堂課後 對於繪圖程式的能力更上一層樓\xa0 \n 期末報告自評成績:70 \n 完成上述流程後, 請將 Final Report 自評分數輸入 cad2024 自評表單中. \n 完成以下內容\xa0 \n Part 練習(到32頁 共12個零件)分別以sovlespace 和nx繪製\xa0 \n HW_exam1\xa0 \n w11_hw 小組分工\xa0 \n HW_exam2\xa0 \n HW_exam3\xa0 \n HW_exam4 \n CoppeliaSim 模擬組合發球器 \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'solvespace指令表:', 'text': '幾何 \n S 直線 R 矩形 C 圓形 P 點 Shift+X 擠出 Shift+L 迴轉 \n 視角 \n W 正視 (指定或編輯面) F2 正視 (與螢幕最接近平行的工作面轉正) F3 等角 \n 約束指令 \n M 中心 D 標註(直線) N 標註(角度) Q 等長 H 水平 V 垂直 L 平行 O 重合 [ 垂直 \n', 'tags': '', 'url': 'solvespace指令表:.html'}, {'title': 'Attendance', 'text': '', 'tags': '', 'url': 'Attendance.html'}, {'title': '第三周', 'text': '\n 於上課時間編輯 \n', 'tags': '', 'url': '第三周.html'}, {'title': '第七周', 'text': '\n', 'tags': '', 'url': '第七周.html'}, {'title': '第八周', 'text': '\n', 'tags': '', 'url': '第八周.html'}, {'title': '第九周', 'text': '\n', 'tags': '', 'url': '第九周.html'}, {'title': '第十四周', 'text': '\n', 'tags': '', 'url': '第十四周.html'}, {'title': '第十五周', 'text': '\n', 'tags': '', 'url': '第十五周.html'}, {'title': '第十六周', 'text': '\n', 'tags': '', 'url': '第十六周.html'}, {'title': 'w15', 'text': '基礎功能建設影片 \n https://www.youtube.com/watch?v=kqpgZO6r5ro&t=2715s \n 控制程式 \n \n # pip install pyzmq cbor keyboard\nfrom coppeliasim_zmqremoteapi_client import RemoteAPIClient\nimport keyboard\n\xa0\n# Connecting to the CoppeliaSim server\nclient = RemoteAPIClient(\'localhost\', 23000)\n\xa0\nprint(\'Program started\')\nsim = client.getObject(\'sim\')\n\xa0\n# Get the handle for the slider (prismatic joint)\ncw= sim.getObject(\'/cw_joint\')\nccw= sim.getObject(\'/ccw_joint\')\n\xa0\n# Starting the simulation\nsim.startSimulation()\nprint(\'Simulation started\')\n\xa0\n# Main control loop\ndef main():\n\xa0\xa0\xa0\xa0# Keep running until simulation is stopped\n\xa0\xa0\xa0\xa0while True:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if keyboard.is_pressed(\'w\'):\xa0 # Move slider to -0.15 position\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0print("w is pressed")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.setJointTargetPosition(cw, -0.25)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if keyboard.is_pressed(\'s\'):\xa0 # Reset slider to the original position\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0print("s is pressed")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.setJointTargetPosition(cw, 0.0)\xa0 # Reset to the initial position\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if keyboard.is_pressed(\'p\'):\xa0 # Move slider to -0.15 position\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0print("p is pressed")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.setJointTargetPosition(ccw, 2.5)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if keyboard.is_pressed(\'l\'):\xa0 # Reset slider to the original position\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0print("l is pressed")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.setJointTargetPosition(ccw, 0.0)\xa0 # Reset to the initial position\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if keyboard.is_pressed(\'t\'):\xa0 # Stop the simulation when \'t\' is pressed\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0print("t is pressed - stopping simulation")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.stopSimulation()\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0break\n\xa0\n# Start the main control loop\nmain() \n \n 得分板控制程式 \n \n function sysCall_init()\n\xa0\xa0\xa0\xa0sim = require(\'sim\')\n\xa0\n\xa0\xa0\xa0\xa0-- Get handles for all sensors (assuming the sensors are named 0, 1, 2, ..., 7)\n\xa0\xa0\xa0\xa0sensors = {}\n\xa0\xa0\xa0\xa0for i = 0, 7 do\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0local handle = sim.getObject(\'/\' .. i) -- ???????? 0?1?2 ?\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if handle ~= -1 then\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sensors[#sensors + 1] = handle\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0else\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.addLog(sim.verbosity_errors, \'Sensor /\' .. i .. \' not found.\')\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0end\n\xa0\xa0\xa0\xa0end\n\xa0\n\xa0\xa0\xa0\xa0-- Get the ball object\n\xa0\xa0\xa0\xa0ball = sim.getObject(\'/ball\')\n\xa0\xa0\xa0\xa0if ball == -1 then\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.addLog(sim.verbosity_errors, \'Ball object not found. Check its name in the scene.\')\n\xa0\xa0\xa0\xa0end\n\xa0\n\xa0\xa0\xa0\xa0-- Get handles for all segments for all 7 displays (0-6)\n\xa0\xa0\xa0\xa0segments = {}\n\xa0\xa0\xa0\xa0for i = 0, 6 do\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0segments[i] = {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0a = sim.getObject(\'/segment[\' .. i .. \']/a\'),\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0b = sim.getObject(\'/segment[\' .. i .. \']/b\'),\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0c = sim.getObject(\'/segment[\' .. i .. \']/c\'),\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0d = sim.getObject(\'/segment[\' .. i .. \']/d\'),\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0e = sim.getObject(\'/segment[\' .. i .. \']/e\'),\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0f = sim.getObject(\'/segment[\' .. i .. \']/f\'),\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0g = sim.getObject(\'/segment[\' .. i .. \']/g\')\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0end\n\xa0\n\xa0\xa0\xa0\xa0-- Define segment patterns for numbers 0-9\n\xa0\xa0\xa0\xa0number_patterns = {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[0] = {a=1, b=1, c=1, d=1, e=1, f=1, g=0},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[1] = {a=0, b=1, c=1, d=0, e=0, f=0, g=0},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[2] = {a=1, b=1, c=0, d=1, e=1, f=0, g=1},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[3] = {a=1, b=1, c=1, d=1, e=0, f=0, g=1},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[4] = {a=0, b=1, c=1, d=0, e=0, f=1, g=1},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[5] = {a=1, b=0, c=1, d=1, e=0, f=1, g=1},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[6] = {a=1, b=0, c=1, d=1, e=1, f=1, g=1},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[7] = {a=1, b=1, c=1, d=0, e=0, f=0, g=0},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[8] = {a=1, b=1, c=1, d=1, e=1, f=1, g=1},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0[9] = {a=1, b=1, c=1, d=1, e=0, f=1, g=1}\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0-- Initialize counter and sensor state\n\xa0\xa0\xa0\xa0counter = 0\n\xa0\xa0\xa0\xa0last_sensor_state = {}\n\xa0\n\xa0\xa0\xa0\xa0-- Define colors\n\xa0\xa0\xa0\xa0background = {0, 0, 0}\n\xa0\xa0\xa0\xa0led_color = {1, 0, 0}\n\xa0\n\xa0\xa0\xa0\xa0-- Initialize all segments to white\n\xa0\xa0\xa0\xa0initializeDisplays()\n\xa0\n\xa0\xa0\xa0\xa0-- Initialize last sensor states\n\xa0\xa0\xa0\xa0for i = 1, #sensors do\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0last_sensor_state[i] = false\n\xa0\xa0\xa0\xa0end\nend\n\xa0\nfunction initializeDisplays()\n\xa0\xa0\xa0\xa0-- Set all segments of all displays to white\n\xa0\xa0\xa0\xa0for display_index = 0, 6 do\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for _, segment_handle in pairs(segments[display_index]) do\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.setShapeColor(segment_handle, nil, sim.colorcomponent_ambient_diffuse, background)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0end\n\xa0\xa0\xa0\xa0end\nend\n\xa0\nfunction displayDigit(number, display_index)\n\xa0\xa0\xa0\xa0-- Ensure number is within 0-9 range\n\xa0\xa0\xa0\xa0number = number % 10\n\xa0\n\xa0\xa0\xa0\xa0-- Set segments according to pattern\n\xa0\xa0\xa0\xa0local pattern = number_patterns[number]\n\xa0\xa0\xa0\xa0for segment_name, segment_handle in pairs(segments[display_index]) do\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if pattern[segment_name] == 1 then\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.setShapeColor(segment_handle, nil, sim.colorcomponent_ambient_diffuse, led_color)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0else\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.setShapeColor(segment_handle, nil, sim.colorcomponent_ambient_diffuse, background)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0end\n\xa0\xa0\xa0\xa0end\nend\n\xa0\nfunction showNumber(n)\n\xa0\xa0\xa0\xa0-- Ensure number is non-negative\n\xa0\xa0\xa0\xa0n = math.max(0, n)\n\xa0\n\xa0\xa0\xa0\xa0-- Maximum displayable number (9999999)\n\xa0\xa0\xa0\xa0n = math.min(n, 9999999)\n\xa0\n\xa0\xa0\xa0\xa0-- Display each digit\n\xa0\xa0\xa0\xa0for i = 0, 6 do\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0local digit = math.floor(n / math.pow(10, i)) % 10\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0displayDigit(digit, i)\n\xa0\xa0\xa0\xa0end\nend\n\xa0\nfunction sysCall_actuation()\n\xa0\xa0\xa0\xa0-- Loop through each sensor and check its state\n\xa0\xa0\xa0\xa0for i = 1, #sensors do\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0local sensor = sensors[i]\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0-- Ensure sensor is valid\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if sensor ~= nil and sensor ~= -1 then\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if ball ~= nil and ball ~= -1 then\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0local result = sim.checkProximitySensor(sensor, ball)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0local sensor_active = (result > 0)\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0-- Increment counter on rising edge (sensor just activated)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if sensor_active and not last_sensor_state[i] then\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0counter = counter + 100\xa0 -- You can adjust this logic\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0showNumber(counter)\xa0 -- Show updated count on the display\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.addLog(sim.verbosity_scriptinfos, "Sensor " .. i .. " detected the ball.")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0end\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0-- Update last sensor state\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0last_sensor_state[i] = sensor_active\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0else\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.addLog(sim.verbosity_errors, \'Ball object is invalid or not found.\')\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0end\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0else\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sim.addLog(sim.verbosity_errors, \'Invalid sensor handle at index \' .. i)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0end\n\xa0\xa0\xa0\xa0end\nend\n\xa0\nfunction sysCall_sensing()\n\xa0\xa0\xa0\xa0-- Put your sensing code here if needed\nend\n\xa0\nfunction sysCall_cleanup()\n\xa0\xa0\xa0\xa0-- Reset all segments to white on cleanup\n\xa0\xa0\xa0\xa0initializeDisplays()\nend \n 相關檔案 w15.7z \n 41223226_w15.ttt \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'solvespace', 'text': 'week3: 練習sovlespace繪圖 熟悉部分指令 繪製出部分草圖 \n \n https://youtu.be/sDiGcogcUm0 \n week5 \n https://youtu.be/1S3Q9SeU8fAw5 \n \n week7: \n https://youtu.be/SUsp8ZZoVuA \n \n /downloads/w7.stl \n week7-2: \n https://youtu.be/z20pm3nVn7Q \n \n /downloads/w7-2.stl \n Week8: \n https://youtu.be/Nn2dM3gWmlo \n \n /downloads/W8.stl \n week8-2: \n https://youtu.be/FFovpJTsRoY \n \n /downloads/w8-2.stl \n week8-3 \n https://youtu.be/0lTSaUqx0HE \n \n /downloads/W8-3.stl \n week9: \n https://youtu.be/JminizXMb1k \n \n /downloads/w9.stl \n week9-2 \n https://youtu.be/393WfAStfZ8 \n \n /downloads/w9-2.stl \n W11-1 \n https://youtu.be/QrtUSlEyXNQ \n \n /downloads/w11.stl \n w11-2 \n https://youtu.be/ALi4q6BjVG4 \n \n /downloads/w11-2.stl \n w11-3 \n https://youtu.be/0auDDkM-T0o \n \n /downloads/w11-3.stl \n', 'tags': '', 'url': 'solvespace.html'}, {'title': 'nx', 'text': '\n \n \n \n \n \n \n \n \n \n \n /downloads/nx practice.7z \xa0前四個檔案 \n /downloads/nx practice (2).7z \xa0後面全部 \n https://youtu.be/AxojkjKtPe4 \xa0影片連結 \n https://youtu.be/LPbYwrdOpGk \n https://youtu.be/n7w2rvQpX3s \n', 'tags': '', 'url': 'nx.html'}, {'title': 'HW1', 'text': '', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW1_Exam', 'text': '', 'tags': '', 'url': 'HW1_Exam.html'}, {'title': 'w10', 'text': 'https://youtu.be/NUHJZs9GUzk \n \n /downloads/W10 EXAM.stl \n 第二題: \n /downloads/w10_exam.zip \n \n https://youtu.be/eJcxBox7k6w \n 從 零件模擬練習 中選出零件, 隨堂進行考試. \n 零件考試題目以 Solvespace 繪圖操作過程影片如下: \n 請將操作影片嵌入 ...... \n 所完成的零件檔案下載 \n 零件考試題目以 NX2312 繪圖操作過程影片如下: \n 請將操作影片嵌入 ...... \n 所完成的零件檔案下載 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w7', 'text': 'HW1 執行心得: \n https://youtu.be/YIh-nXEAf74 \n 目前七個禮拜 總共練習3張圖 \n 對於熟悉solvespace的部分應該差不多了 \n 指令運用情況還可以 \n HW1 自評分數: \n 60 \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w11_hw', 'text': '1.請各分組根據\xa0 flipper_nx2312.7z \xa0中的零件尺寸, 分別採 Solvespace 與 NX2312 繪製以下零件: \n Plongeur Batteur_sldprt.prt \n Piece composite_sldprt.prt \n Piece métalique gauche_sldprt.prt \n Plastique Flipper_sldprt.prt \n Support Bobine_sldprt.prt \n Platine Batteur_sldprt.prt \n Flipper_sldprt.prt \n flipper_in_solvespace.7z \n 2.利用 Solvespace 與 NX2312 完成上列零件的組立 \n 3. 請擇一將所完成的 Solvespace 或 NX2312 組立檔案轉入 CoppeliaSim, 並嘗試讓\xa0 Flipper_sldprt.prt 以每秒 10 度的速度旋轉。 \n 組員: \n 41223215_吳承叡:負責使用nx2312繪製 \n Platine Batteur_sldprt.prt \n Support Bobine.prt \n Piece métalique gauche_sldprt.prt \n https://youtu.be/HZaQLYx3Dqo \n  https://youtu.be/nV2eSmpo5tk \n https://youtu.be/syPfnrl3e84 \n 41223226_林堃燁:負責使用solvespace繪製 flipper 的全部零件 \n 與 solvespace零件的組立 ，並使用 solvespace組立檔案 拍攝 Flipper旋轉的 影片 \n 41223235_陳脩升: 負責使用nx2312繪製 \n Plongeur Batteur_sldprt.prt \n Piece composite_sldprt.prt \n Plastique Flipper_sldprt.prt \n Flipper_sldprt.prt \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'HW2', 'text': '', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW2_Exam', 'text': '', 'tags': '', 'url': 'HW2_Exam.html'}, {'title': 'w16_exam1', 'text': '\n https://youtu.be/jchh8IHKtfs \n \n https://youtu.be/d9KCIVXslpQ \n \n https://youtu.be/UcvSIYbc-bo \n 這是組合件(旁邊那塊別理他) \n \xa0 \n https://youtu.be/k2XPrinOWvU \xa0組合影片 \n /downloads/41223215_w16_exam1.7z \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW3', 'text': '', 'tags': '', 'url': 'HW3.html'}, {'title': 'HW3_Exam', 'text': '', 'tags': '', 'url': 'HW3_Exam.html'}, {'title': 'w16_exam2', 'text': '\n \n https://youtu.be/WJ5gagB0-9A \n \n https://youtu.be/ypEEIVa4Rdc \xa0第一部 \n https://youtu.be/UZtFggqQYVI \xa0第二部 (畫到一半下課回家畫 \n \n https://youtu.be/U0xTyiGCvNs \n \n /downloads/41223215_w16_exam2.7z \xa0檔案位置 \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW4', 'text': '', 'tags': '', 'url': 'HW4.html'}, {'title': 'HW4_Exam', 'text': '', 'tags': '', 'url': 'HW4_Exam.html'}, {'title': 'w16_exam3', 'text': '/downloads/影片使用零件.stl \n https://youtu.be/JPBQZP6fyac \xa0影片連結 \n 先進 \xa0CoppeliaSim中 把零件叫出來 再把零件分解 叫出position 設定參數(我用0.3) 和撞針質心放在同個地方 \n 資料夾要放對地方\xa0 先是外框 在是position 在是撞針(不然啟動時會掉下去) 之後叫出球就可以發球了 \n /downloads/w16 exam-3.ttt \xa0場景 \n \n', 'tags': '', 'url': 'w16_exam3.html'}]};